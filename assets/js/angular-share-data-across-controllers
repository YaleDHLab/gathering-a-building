buildingApp.factory("footerService", [
      "$rootScope",
  function($rootScope) {
    
    /***
    * @object: keys describe aspects of the footer
    *          values describe the current state of those aspects
    * @object.style: supported options are {full, partial}
    *
    * Display keys indicate the content to be shown in the view, 
    * url keys indicate the url to which the footer component will
    * link, and style indicates whether to display a full or partial
    * width footer
    ***/

    var footer = {
      "left": {
        "display": "Home",
        "url": "/#/"
      },
      "right": {
        "display": "Next <i class='fa fa-angle-down'></i>",
        "url": "/#/"
      },
      "style": "full"
    };

    /***
    * @params: none
    * @returns: functions that allow injecting controllers to get,
    *           set, or subscribe to changes to footer
    *
    * Defines the public methods controllers can call to get, set, or 
    * subscribe to changes to the footer object
    ***/

    return {

      /***
      * @params: scope object, callback
      * @returns: none
      *
      * Binds a callback function to an event so that when the
      * footer:updated event is emitted, the callback is called
      ***/

      subscribe: function(scope, callback) {
        var handler = $rootScope.$on('footer:updated', callback);
        scope.$on("destroy", handler);
      },

      /***
      * @params: a footer object as defined above
      * @returns: none
      * @emits: "footer:updated" event
      *
      * Updates the status of the service's footer object and emits
      * a signal to notify listeners of the change
      ***/

      set: function(newFooter) {
        footer = newFooter;
        $rootScope.$emit("footer:updated");
      },

      /***
      * @params: none
      * @returns: the current service footer object
      *
      * Sends requesting controllers the current footer service object
      ***/

      get: function() {
        return footer;
      }
    };
  }
])




// Footer Controller to manage footer state across views
buildingApp.controller("footerController", [
      "$scope", "$http", "$timeout", "footerService",
  function($scope, $http, $timeout, footerService) {

    /***
    * @params: none
    * @returns: none
    *
    * Makes a get request to the footer service to define $scope.footer
    * for the view, and wraps that call in $timeout in order to avoid
    * creating a digest cycle if the application is already in a digest
    * cycle at the tie of request
    ***/

    var updateFooter = function() {
      $timeout( function() {
        $scope.footer = footerService.get();
      }, 10);
    }

    /***
    * @params: none
    * @returns: none
    *
    * Makes a get request to the footer service to define $scope.footer
    * for the view as soon as the DOM is loaded
    ***/

    angular.element(document).ready(function () {
      updateFooter();
    });

    /***
    * @params: $scope object, callback
    * @returns: none
    *
    * Subscribes to the footerService, which will call the callback 
    * updateFooter() when the footerService emits footer:updated signal
    ***/

    footerService.subscribe($scope, updateFooter);

  }
]);




// Controller for home view
buildingApp.controller("homeController", [
      "$scope", "$http", "footerService", "textColumnService",
  function($scope, $http, footerService, textColumnService) {

    /***
    * @params: Object with the form {k1:{k2:v2, k3:v3}}
    *          used to update state in the State service
    * @returns: none
    *
    * Hides or shows the navigation overlay
    ***/

    var setFooter = function(request) {
      footerService.set(request);
    };

    var footer = {
      "left": {
        "display": "Home",
        "url": "/#/"
      },
      "right": {
        "display": "Next <i class='fa fa-angle-down'></i>",
        "url": "/#/"
      },
      "style": "full"
    };

    setFooter(footer);


    /***
    * @params: textColumn Object used to update the textColumn factory
    * @returns: none
    *
    * Updates the textColumn controller, which populates the text column
    ***/

    var setTextColumn = function(request) {
      textColumnService.set(request);
    };

    var textColumn = {};

    setTextColumn(textColumn);

  }
]);

